<section id="links">
  <h2>About Me</h2>
  <p>
  I am <em>passionate</em> about making software, and with over <em>20 years
  experience</em> leading and engineering <em>commercial-grade</em> software
  products, I've been fortunate to work on a broad range of technologies in
  multiple capacities.  I currently focus on architecture and development in <em>C,
  C++, and Ruby on Rails,</em> and am comfortable working with other technologies,
  when needed.
  </p>

  <p>
  I stongly prefer <em>multi-platform development,</em> and typically
  cross-develop for <em>Windows, Mac OS X, and Unix/Linux</em> systems.  I
  fundamentally believe that <em>good software</em> should be designed
  independently of the operating system and natively built to make best use of each
  O/S.  This is more than just portable look-and-feel user interfaces or
  least-common-denominator software, but is fully-functional support of each
  platform in the most <em>native</em> and natural form for the platform.
  I'm skilled in using a wide range of technologies, including <em>SQL and noSQL
  databases, APIs and libraries, graphics processing, communications and protocols,
  compression, encryption, multi-threading, and performance and scalability
  optimization.</em>
  </p>

  <p>
  Automated testing, particularly <em>unit testing,</em> is a standard part of my
  development process.  Good software built on verified components is far more
  reliable and produces the <em>high quality</em> necessary for commercial products.
  Whether testing occurs before, during, or after development is subjective; the
  important thing is that thorough automated testing is performed at the code level.
  </p>

  <p>
  I think and act like an <em>entrepreneur,</em> and I'm typically seen as a
  <em>go-getter</em> and a <em>highly creative</em> type.  I tend to <em>take
  ownership</em> of my products, and make myself both <em>responsible and
  accountable</em> for their success.
  </p>

  <h3>Technical Leadership</h3>
  <p>
  I'm a <em>software architect</em> at heart, and that's the foundation for my
  technical leadership skills.  I practice <em>frank and open communication,</em>
  and believe that a leader is a <em>specialized</em> facet of the team, not a
  separated role.  I find that this approach fosters teamwork and mutual respect,
  which ultimately means greater team productivity.
  </p>

  <p>
  I am skilled at working with non-engineering folks, as well, including
  <em>executive management, product management, sales, marketing</em>.  I'm
  good working directly with customers and comfortable interacting with the media.
  Within a development team, I explicitly take the role of <em>liaison</em> to
  non-technical members, so as to provide a buffer for the team to <em>mitigate</em>
  distractions and interruptions, as well as to ensure <em>consistent communication.
  </em>
  </p>

  <h3>Full Stack Engineer</h3>
  <p>
  My typical web project is a <em>Software-as-a-Service (SaaS)</em> application,
  which offers the ability to create <em>ground-breaking, unique, and highly
  inventive</em> solutions.  In addition, SaaS applications require a greater level
  of development experience and skill, which strongly appeals to my <em>inventor's
  spirit.</em>  SaaS applications make the web <em>functional,</em> rather than
  simply presentational, and I believe that's the ultimate strength of the web.
  </p>

  <p>
  I'm skilled in all layers of the web stack, using a variety of technologies.
  While my primary web stack focus is <em>Ruby on Rails,</em> I have also developed
  and delivered full-stack applications in Java/JSP, C#/ASP.NET, PHP/Symfony2, and
  even <em>C++</em>.  As a skilled full-stack engineer, I have a <em>mastery</em>
  of the major facets of a web application: the backend server, data persistence,
  user experience (UX) design, HTML page layout, CSS styling, and dynamic behavior
  with Javascript, Ajax, and web APIs.
  </p>

  <p>
  On the presentation side, I work well with <em>Javascript, HTML5, and CSS/SCSS,
  </em> as well as various media types.  I prefer to feature <em>broad browser
  support</em> whenever possible, in order to minimize Support costs, and find that
  using libraries such as <em>jQuery and Underscore,</em> as well as frameworks such
  as <em>React and Backbone</em> provide a great deal of help in accomplishing this.
  Dynamic behavior brings a website to life, providing interaction and feedback to the user, enhancing the overall experience.
  </p>

  <p>
  On the backend, I typically use a <em>MVC framework</em>, such as <em>Ruby on
  Rails,</em> to implement the server-side functionality.  I'm comfortable using
  various database technologies, including relational (SQL and noSQL), document,
  key/value, graph, and object databases for persistence.  In addition, I'm keenly
  aware of the <em>performance and scalability</em> needs of the application, and I
  ensure that the application design and implementation address both aspects.
  Performance and scalability goals can met using a wide variety of techniques,
  from <em>pre-computation</em> and <em>intelligent caching</em> to 
  <em>asynchronous server</em> design and <em>task queues.</em>
  </p>

  <p>
  I often consume and publish <em>web APIs.</em>  Full-featured web applications
  frequently offer API access, and this is particularly true of SaaS applications
  and <em>microservices.</em>  The most common API technologies used today are
  <em>REST and WebHooks,</em> although <em>SOAP, RPC-XML, and even CORBA</em> have
  all been used in the not-too-distant past.  Additionally, URL and POST params, as
  well as <em>JSON, XML, YAML, and CSV</em> are go-to web API  data formats.  I'm
  well-versed working with each, whether dealing directly with the envelope and
  content formats or when using a language wrapper published for the API.
  </p>

  <h3>Systems Software Engineer</h3>
  <p>
  </p>

  <h3>Well-Rounded Software Developer</h3>
  <p>
  </p>
</section>
